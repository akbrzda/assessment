const Joi = require('joi');
const userModel = require('../models/userModel');
const { sendTelegramLog } = require('../services/telegramLogger');
const { sendUserNotification } = require('../services/telegramNotifier');
const referenceModel = require('../models/referenceModel');

const updateSchema = Joi.object({
  firstName: Joi.string().trim().min(2).max(64).required(),
  lastName: Joi.string().trim().min(2).max(64).required(),
  branchId: Joi.number().integer().positive().required(),
  positionId: Joi.number().integer().positive().required(),
  roleId: Joi.number().integer().positive().required(),
  level: Joi.number().integer().min(1).default(1),
  points: Joi.number().integer().min(0).default(0)
});

async function listUsers(req, res, next) {
  try {
    const users = await userModel.listUsers();
    res.json({ users });
  } catch (error) {
    next(error);
  }
}

async function updateUser(req, res, next) {
  try {
    const userId = Number(req.params.id);
    const { error, value } = updateSchema.validate(req.body, { abortEarly: false });
    if (error) {
      return res.status(422).json({ error: error.details.map((d) => d.message).join(', ') });
    }

    const existing = await userModel.findById(userId);
    if (!existing) {
      return res.status(404).json({ error: 'User not found' });
    }

    const branch = await referenceModel.getBranchById(value.branchId);
    if (!branch) {
      return res.status(422).json({ error: 'Branch does not exist' });
    }

    const position = await referenceModel.getPositionById(value.positionId);
    if (!position) {
      return res.status(422).json({ error: 'Position does not exist' });
    }

    const role = await referenceModel.getRoleById(value.roleId);
    if (!role) {
      return res.status(422).json({ error: 'Role does not exist' });
    }

    const payload = {
      firstName: value.firstName,
      lastName: value.lastName,
      positionId: value.positionId,
      branchId: value.branchId,
      roleId: value.roleId,
      level: value.level ?? existing.level,
      points: value.points ?? existing.points
    };

    await userModel.updateUserByAdmin(userId, payload);
    const updated = await userModel.findById(userId);

    if (existing.telegramId) {
      await sendUserNotification(
        existing.telegramId,
        '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.'
      );
    }

    await sendTelegramLog(
      `üõ† <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n` +
        `ID: ${updated.id}\n` +
        `–ò–º—è: ${updated.firstName} ${updated.lastName}\n` +
        `–†–æ–ª—å: ${updated.roleName}\n` +
        `–û–±–Ω–æ–≤–∏–ª: ${req.currentUser.firstName} ${req.currentUser.lastName}`
    );

    res.json({ user: updated });
  } catch (error) {
    next(error);
  }
}

async function deleteUser(req, res, next) {
  try {
    const userId = Number(req.params.id);
    const existing = await userModel.findById(userId);
    if (!existing) {
      return res.status(404).json({ error: 'User not found' });
    }

    if (userId === req.currentUser.id) {
      return res.status(400).json({ error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è' });
    }

    await sendUserNotification(
      existing.telegramId,
      '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É.'
    );

    await userModel.deleteUser(userId);

    await sendTelegramLog(
      `üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n` +
        `ID: ${existing.id}\n` +
        `–ò–º—è: ${existing.firstName} ${existing.lastName}\n` +
        `–£–¥–∞–ª–∏–ª: ${req.currentUser.firstName} ${req.currentUser.lastName}`
    );

    res.status(204).send();
  } catch (error) {
    next(error);
  }
}

module.exports = {
  listUsers,
  updateUser,
  deleteUser
};
